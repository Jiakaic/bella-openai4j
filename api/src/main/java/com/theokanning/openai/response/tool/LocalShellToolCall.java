package com.theokanning.openai.response.tool;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.theokanning.openai.response.ItemStatus;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.Map;

/**
 * A tool call to run a command on the local shell.
 *
 * @see <a href="https://platform.openai.com/docs/api-reference/response/create">Response API</a>
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
public class LocalShellToolCall extends ToolCall {

    /**
     * The type of the local shell call. Always "local_shell_call".
     */
    private String type = "local_shell_call";

    /**
     * The unique ID of the local shell call.
     */
    private String id;

    /**
     * The unique ID of the local shell tool call generated by the model.
     */
    @JsonProperty("call_id")
    private String callId;

    /**
     * Execute a shell command on the server.
     */
    private ShellAction action;

    /**
     * The status of the local shell call.
     */
    private ItemStatus status;

    @Override
    public String getType() {
        return type;
    }

    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class ShellAction {
        /**
         * The command to execute.
         */
        private List<String > command;

        /**
         * The type of the local shell action. Always exec.
         */
        private String type = "exec";

        /**
         * Working directory for the command.
         */
        @JsonProperty("working_directory")
        private String workingDirectory;

        /**
         * Environment variables for the command.
         */
        private Object env;

        /**
         * Optional user to run the command as.
         */
        private String user;

        /**
         * Optional timeout in milliseconds for the command.
         */
        private Integer timeout_ms;
    }
}
